"""
Django settings for velma_backend project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import dj_database_url
import os
import sys
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'u$$y2x0gl5d%)8hvkc^kiprj--_&@r4gf#&1sh7mqys02tw-mk'
# SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
SECRET_KEY = config("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = os.getenv("DEBUG", "False") == "True"
# DEBUG = config("DEBUG", "False") == "True"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")
# ALLOWED_HOSTS = []
DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "False") == "False"


# Application definition

SHARED_APPS=[
    # ...
    'django_tenants',
    'django.contrib.admin',
    'django.contrib.auth', # Defined in both shared apps and tenant apps
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.contenttypes', # Defined in both shared apps and tenant apps
    # 'tenant_users.permissions', # Defined in both shared apps and tenant apps
    # 'tenant_users.tenants', # defined only in shared apps
    'customers.apps.CustomersConfig', # Custom defined app that contains the TenantModel. Must NOT exist in TENANT_APPS
    'auth_account.apps.AuthAccountConfig', # Custom app that contains the new User Model (see below). Must NOT exist in TENANT_APPS
    'django.contrib.postgres',
    'simple_history',
    'corsheaders',
    'drf_yasg',
    'coreapi',
    # ...
]
TENANT_APPS=[
    # ...
    
    'django.contrib.contenttypes', # Defined in both shared apps and tenant apps
    # 'tenant_users.permissions', # Defined in both shared apps and tenant apps
    'supplier.apps.SupplierConfig',



    # ...
]
INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]


# SWAGGER_SETTINGS = { "DEFAULT_GENERATOR_CLASS": "rest_framework.schemas.generators.BaseSchemaGenerator", }


TENANT_MODEL = 'customers.Company'
TENANT_DOMAIN_MODEL = "customers.Domain"
BASE_DOMAIN = 'localhost'



REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.TokenAuthentication',  # <-- And here
    # ],
 
    
    
}
MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF= 'velma_backend.urls'
# ROOT_URLCONF = config("ROOT_URLCONF")


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'velma_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


# if DEVELOPMENT_MODE is True:
DATABASES = {
    "default": {
       'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_HOST'),
        'sslmode': require
    # 'ENGINE': 'django_tenants.postgresql_backend',
    #     'NAME': config('DB_NAME'),
    #     'USER': config('DB_USER'),
    #     'PASSWORD': config('DB_PASSWORD'),
    #     'HOST': config('DB_HOST'),
    #     'PORT': '',
    }
  }
# elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
#     if os.getenv("DATABASE_URL", None) is None:
#         raise Exception("DATABASE_URL environment variable not defined")
#     DATABASES = {
#         "default": {
#            'ENGINE': 'django_tenants.postgresql_backend',
#             'NAME': config('dbname'),
#             'USER': config('username'),
#             'PASSWORD': config('password'),
#             'HOST': config('host'),
#             'PORT': '25060',
#              'sslmode': 'require'
#         }
        
#         # "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
#     }

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "root")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

AUTH_USER_MODEL = 'auth_account.User'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True





# print('Markdown module path', markdown.__file__)
# print('Markdown version:', markdown.version)
